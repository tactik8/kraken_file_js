{"mappings":"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","sources":["src/index.js","src/KrakenFile/KrakenFile.js","src/KrakenFile/htmlParts/htmlThumbnailImage.js","src/KrakenFile/htmlParts/htmlThumbnailVideo.js","src/KrakenFile/htmlParts/htmlCard.js","src/KrakenFile/helpers/videoHelpers.js"],"sourcesContent":["import {KrFile as KrFileClass} from './KrakenFile/KrakenFile.js'\n\nexport const KrFile = KrFileClass\n\n","//const API_URL = \"https://cdn.krknapi.com/\";\nconst API_URL = 'https://931bba76-1b26-4445-ad26-d2c9d201d0e2-00-lpy51ddmv2p2.janeway.replit.dev/'\nconst API_PATH = \"krakenFileJs/test1\" //\"test4\";\n\nimport {getHtmlThumbnailImage} from './htmlParts/htmlThumbnailImage.js'\nimport {getHtmlThumbnailVideo} from './htmlParts/htmlThumbnailVideo.js'\nimport { getCard } from './htmlParts/htmlCard.js'\nimport { getVideoCover } from './helpers/videoHelpers.js'\n\n\nexport class KrFile {\n    constructor() {\n        this._file = null;\n        this._record = {};\n        this._record[\"@type\"] = \"DigitalDocument\";\n        this._record[\"@id\"] = String(crypto.randomUUID());\n    }\n\n    get record() {\n        return this._record;\n    }\n\n    set record(value) {\n        this._record = value;\n    }\n\n    get file() {\n        return this._file;\n    }\n\n    set file(value) {\n        this.setFile(value)\n    }\n\n    async setFile(value){\n        this._file = value;\n        let r = await this.extractFromFile();\n        return this\n    }\n\n    async extractFromFile() {\n        this._record.name = this._file.name;\n        this.extractSize();\n        this.extractFormat();\n        this.extractType();\n        let r1 = await this.extractThumbnail();\n        let r = await this.post();\n        return r\n    }\n\n    extractSize() {\n        this._record.size = {\n            \"@type\": \"QuantitativeValue\",\n            \"@id\": String(crypto.randomUUID()),\n            unitText: \"bytes\",\n            value: this._file.size,\n        };\n    }\n\n    extractFormat() {\n        this._record.encodingFormat = this.file.type;\n    }\n\n    extractType() {\n        switch (this._record.encodingFormat) {\n                \n            case \"video/mp4\":\n                this._record[\"@type\"] = \"VideoObject\";\n                break;\n            case \"image/png\":\n                this._record[\"@type\"] = \"ImageObject\";\n                break;\n            case \"application/pdf\":\n                this._record[\"@type\"] = \"DigitalDocument\";\n                break;\n            default:\n                this._record[\"@type\"] = \"DigitalDocument\";\n                break;\n        }\n    }\n\n    async extractThumbnail(){\n\n        \n        switch (this._record['@type']) {\n\n            case \"ImageObject\":\n                \n                break;\n            case \"VideoObject\":\n                //console.log('thumbnail start')\n                //let thumbnail = new KrFile()\n                //let videoCover = await getVideoCover(this.file, 1.5)\n                //let r = await thumbnail.setFile(videoCover)\n                //this._record[\"thumbnailUrl\"] = thumbnail.record?.contentUrl;\n                //console.log('thumbnail end', this._record[\"thumbnailUrl\"])\n                break;\n            case \"application/pdf\":\n                \n                break;\n            default:\n                \n                break;\n            }\n           \n    }\n\n    async post() {\n        let apiEndpoint = API_URL + API_PATH;\n\n        // Append file\n        const formData = new FormData();\n        formData.append(\"file\", this._file);\n\n        // Append record\n        let record = this.record;\n        for (var key in record) {\n          //  formData.append(key, record[key]);\n        }\n\n        let headers = {\n            //\"Content-Type\": \"application/json\",\n            //Authorization: \"bob\",\n        };\n\n        try {\n            const response = await fetch(apiEndpoint, {\n                method: \"post\",\n                body: formData,\n                //headers: headers,\n                //mode: \"no-cors\",\n            });\n\n            //console.log('s', response.status)\n            const t = await response.headers;\n\n            const data = await response.json();\n            this.record.encodingFormat = data.encodingformat;\n            this.record.size = data.size;\n            this.record.contentUrl = data.contentUrl;\n            this.record.name = data.name;\n            return;\n        } catch (error) {\n            console.error(\n                \"There was a problem with the fetch operation:\",\n                error,\n            );\n            throw error;\n        }\n    }\n\n\n    // -----------------------------------------------------\n    //  html \n    // -----------------------------------------------------\n\n    htmlThumbnail(){\n\n        let element = document.createElement('div')\n        let record_type = this._record['@type'] \n        if(record_type == 'ImageObject'){\n            let mediaContent = getHtmlThumbnailImage(this.record)\n            let content = getCard(this.record, mediaContent)\n            element.innerHTML = content\n        }\n        if(record_type == 'VideoObject'){\n            let mediaContent = getHtmlThumbnailVideo(this.record)\n            let content = getCard(this.record, mediaContent)\n            element.innerHTML = content\n           \n\n        }\n        \n        return element\n        \n    }\n\n\n    \n    \n    \n}\n","export function getHtmlThumbnailImage(record){\n\n    let modalID = 'Modal_' + String(crypto.randomUUID())\n    let content = `\n\n    <a type=\"button\" class=\"\" data-bs-toggle=\"modal\" data-bs-target=\"#${modalID}\">\n        <img style=\"max-width: 200px\" class=\"img-thumbnail\" src=\"${record.contentUrl || record.contentUrl}\">\n    </a>\n    <div class=\"modal\" id=\"${modalID}\" tabindex=\"-1\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">${record.name || ''}</h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <img class=\"img-fluid\" src=\"${record.contentUrl}\">\n          </div>\n\n        </div>\n      </div>\n    </div>\n    `\nreturn content\n\n}","export function getHtmlThumbnailVideo(record){\n\n  if (record.contentUrl && record.contentUrl != null){\n    return getHtmlThumbnailVideoContent(record)\n  }\n  if (record.embedUrl && record.embedUrl != null){\n    return getHtmlThumbnailVideoEmbed(record)\n  }\n    \n}\n\nexport function getHtmlThumbnailVideoContent(record){\n\n    let modalID = 'Modal_' + String(crypto.randomUUID())\n    let content = `\n\n    <a type=\"button\" class=\"\" data-bs-toggle=\"modal\" data-bs-target=\"#${modalID}\">\n        <div class=\"ratio ratio-16x9\" >\n          <video class=\"object-fit-scale\" src=\"${record.contentUrl }\" controls></video>\n        </div>\n    </a>\n    <div class=\"modal\" id=\"${modalID}\" tabindex=\"-1\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <p class=\"\"><small>${record.name || ''}</small></p>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body text-truncate\">\n            <div class=\"ratio ratio-16x9\" >\n              <video class=\"object-fit-scale\" src=\"${record.contentUrl} \" controls></video>\n            </div>\n\n          </div>\n\n        </div>\n      </div>\n    </div>\n    `\nreturn content\n\n}\n\n\nexport function getHtmlThumbnailVideoEmbed(record){\n\n    let modalID = 'Modal_' + String(crypto.randomUUID())\n    let content = `\n\n    <a type=\"button\" class=\"\" data-bs-toggle=\"modal\" data-bs-target=\"#${modalID}\">\n        <div class=\"ratio ratio-16x9\" >\n          \n           ${record.embedUrl}\n        </div>\n    </a>\n    <div class=\"modal\" id=\"${modalID}\" tabindex=\"-1\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <p class=\"\"><small>${record.name || ''}</small></p>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body text-truncate\">\n            <div class=\"ratio ratio-16x9\" >\n             ${record.embedUrl}\n            </div>\n\n          </div>\n\n        </div>\n      </div>\n    </div>\n    `\nreturn content\n\n}","\n\nexport function getCard(record, imageContent){\n\n    let content = `\n    \n    <div class=\"card\" style=\"max-width: 16rem\" >\n      ${imageContent}\n      <div class=\"card-body\">\n        <p class=\"\"><small>${record.name}</small></p>\n       \n      </div>\n    </div>\n    \n    `\n    return content\n\n        \n}","export function getVideoCover(file, seekTo = 0.0) {\n    //console.log(\"getting video cover for file: \", file);\n    return new Promise((resolve, reject) => {\n        // load the file to a video player\n        const videoPlayer = document.createElement('video');\n        videoPlayer.setAttribute('src', URL.createObjectURL(file));\n        videoPlayer.load();\n        videoPlayer.addEventListener('error', (ex) => {\n            reject(\"error when loading video file\", ex);\n        });\n        // load metadata of the video to get video duration and dimensions\n        videoPlayer.addEventListener('loadedmetadata', () => {\n            // seek to user defined timestamp (in seconds) if possible\n            if (videoPlayer.duration < seekTo) {\n                reject(\"video is too short.\");\n                return;\n            }\n            // delay seeking or else 'seeked' event won't fire on Safari\n            setTimeout(() => {\n              videoPlayer.currentTime = seekTo;\n            }, 200);\n            // extract video thumbnail once seeking is complete\n            videoPlayer.addEventListener('seeked', () => {\n                //console.log('video is now paused at %ss.', seekTo);\n                // define a canvas to have the same dimension as the video\n                const canvas = document.createElement(\"canvas\");\n                canvas.width = videoPlayer.videoWidth;\n                canvas.height = videoPlayer.videoHeight;\n                // draw the video frame to canvas\n                const ctx = canvas.getContext(\"2d\");\n                ctx.drawImage(videoPlayer, 0, 0, canvas.width, canvas.height);\n                // return the canvas image as a blob\n                ctx.canvas.toBlob(\n                    blob => {\n                        resolve(blob);\n                    },\n                    \"image/jpeg\",\n                    0.75 /* quality */\n                );\n            });\n        });\n    });\n}"],"names":[],"version":3,"file":"main.js.map"}